#include "imports/stdlib.fc";

;; storage
global slice admin;

;; constants
int min_balance_amount() asm "500000000 PUSHINT"; ;; 0.5 TON
int min_recv_amount() asm "2000000000 PUSHINT"; ;; 2 TON

;; opcodes
int op::accept_funds() asm "0xa4d8086f PUSHINT";
int op::admin_withdraw() asm "0x217e5898 PUSHINT";

() load_data() impure inline {
    slice ds = get_data().begin_parse();
    admin = ds~load_msg_addr();
    ds.end_parse();
}

() send_message(int amount, slice to, int mode) impure inline {
    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(0, 107)
        .end_cell();
    send_raw_message(msg, mode);
}

int balance() {
    var [balance, _] = get_balance();
    return balance;
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    load_data();

    if (op == op::accept_funds()) {
        ;; if less than 2 TON - send them back
        if (msg_value < min_recv_amount()) {
            send_message(msg_value, sender, 1);
            return ();
        }

        my_balance += msg_value;
        return ();
    }

    if (op == op::admin_withdraw()) {
        throw_unless(101, equal_slices(sender, admin));
        throw_unless(100, balance() >= min_balance_amount());
        send_message(my_balance - min_balance_amount(), admin, 1);
        return ();
    }
}

int read_balance() method_id {
    return balance();
}
