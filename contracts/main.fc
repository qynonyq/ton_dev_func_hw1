#include "imports/stdlib.fc";

global slice admin;

const op::accept_funds = 0xa4d8086f;
const op::admin_withdraw = 0x217e5898;

const min_recv_amount = 2000000000;
const min_contract_amount = 500000000;

() load_data() impure inline {
    slice ds = get_data().begin_parse();
    admin = ds~load_msg_addr();
    ds.end_parse();
}

() send_message(int amount, slice to, int mode) impure inline_ref {
    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(0, 107)
        .end_cell();
    send_raw_message(msg, mode);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    load_data();

    if (op == op::accept_funds) {
        ;; if less than 2 TON - send them back
        if (msg_value < min_recv_amount) {
            send_message(msg_value, sender, 1);
            return ();
        }

        my_balance += msg_value;
        return ();
    }

    if (op == op::admin_withdraw) {
        throw_unless(101, equal_slices(sender, admin));
        var [balance, _] = get_balance();
        throw_unless(100, balance >= min_contract_amount);
        send_message(my_balance - min_contract_amount, admin, 1);
        return ();
    }
}

int balance() method_id {
    var [balance, _] = get_balance();
    return balance;
}
